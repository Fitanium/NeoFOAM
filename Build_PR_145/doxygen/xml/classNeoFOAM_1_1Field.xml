<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classNeoFOAM_1_1Field" kind="class" language="C++" prot="public">
    <compoundname>NeoFOAM::Field</compoundname>
    <includes refid="field_8hpp" local="no">field.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoFOAM_1_1Field_1a4448dad85c0348167844faaf076c01fe" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
        <definition>size_t NeoFOAM::Field&lt; ValueType &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Size of the field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="410" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoFOAM_1_1Field_1ad8da4b64627522d2cf5078f1701af863" prot="private" static="no" mutable="no">
        <type>ValueType *</type>
        <definition>ValueType* NeoFOAM::Field&lt; ValueType &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Pointer to the field data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="411" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoFOAM_1_1Field_1ac51548bd9bf092b14f8164d2bc742fd5" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref></type>
        <definition>const Executor NeoFOAM::Field&lt; ValueType &gt;::exec_</definition>
        <argsstring></argsstring>
        <name>exec_</name>
        <briefdescription>
<para>Executor associated with the field. (CPU, GPU, openMP, etc.) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="412" column="20" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="412" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a6900cfd42fa127eda30b27dd0cebd9a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, size_t size)</argsstring>
        <name>Field</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> with a given size on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="58" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="58" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a1ea08e0601343f6fe0fda8ffd8706d56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, size_t size, const ValueType *in)</argsstring>
        <name>Field</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const ValueType *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> with a given size from existing memory on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to existing data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="75" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="75" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ac25179c81371894f06f4c974fcdf081b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, size_t size, ValueType value)</argsstring>
        <name>Field</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> with a given size on an executor and uniform value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the default value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="95" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="95" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ac615ca8777f8e5ce7d5d9cb64cc58441" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Executor &amp;exec, std::vector&lt; ValueType &gt; in)</argsstring>
        <name>Field</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>std::vector&lt; ValueType &gt;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> with a given size on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of elements to copy over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="112" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="112" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ab17560942b395479c075549c15188709" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::Field</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>Field</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor, creates a new field with the same size and data as the parsed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="131" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a7cad3648ef3dbb9efd4429fd9ddc4860" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; ValueType &gt;::~Field</definition>
        <argsstring>()</argsstring>
        <name>~Field</name>
        <briefdescription>
<para>Destroy the <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="140" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ab3d5f8f8a4a7b07d5873f767978c0be7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::apply</definition>
        <argsstring>(func f)</argsstring>
        <name>apply</name>
        <param>
          <type>func</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>applies a functor, transformation, to the field </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The functor to map over the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Ideally the f should be a KOKKOS_LAMBA </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="152" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ae6f586e79c51c81a4d786171a9741c02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt;ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::copyToExecutor</definition>
        <argsstring>(Executor dstExec) const</argsstring>
        <name>copyToExecutor</name>
        <param>
          <type><ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref></type>
          <declname>dstExec</declname>
        </param>
        <briefdescription>
<para>Copies the data to a new field on a specific executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dstExec</parametername>
</parameternamelist>
<parameterdescription>
<para>The executor on which the data should be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the field on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="162" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="162" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a1d14f252f4815e69e8b085946f27cea4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt;ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::copyToHost</definition>
        <argsstring>() const</argsstring>
        <name>copyToHost</name>
        <briefdescription>
<para>Returns a copy of the field back to the host. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the field on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="176" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a4e66ce8a5aca4acb78041a8b94ff9734" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::copyToHost</definition>
        <argsstring>(Field&lt; ValueType &gt; &amp;result)</argsstring>
        <name>copyToHost</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Copies the data (from anywhere) to a parsed host field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The field into which the data must be copied. Must be sized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>exits if the size of the result field is not the same as the source field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="186" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="186" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ac50ebe1f96d984ab3bad80769cf0e9fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION ValueType &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION ValueType&amp; NeoFOAM::Field&lt; ValueType &gt;::operator[]</definition>
        <argsstring>(const size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Subscript operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of cell in the field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the index i </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="200" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a6e746984b08dcb801db1da82b4cf1011" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION const ValueType &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION const ValueType&amp; NeoFOAM::Field&lt; ValueType &gt;::operator[]</definition>
        <argsstring>(const size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Subscript operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of cell in the field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the index i </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="208" column="21" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a84b219b5da78a859ec34574db7e8d898" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION ValueType &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION ValueType&amp; NeoFOAM::Field&lt; ValueType &gt;::operator()</definition>
        <argsstring>(const size_t i)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Function call operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of cell in the field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the index i </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="216" column="15" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ab9ace08d86a2bbabfbc66bbd72217950" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION const ValueType &amp;</type>
        <definition>KOKKOS_INLINE_FUNCTION const ValueType&amp; NeoFOAM::Field&lt; ValueType &gt;::operator()</definition>
        <argsstring>(const size_t i) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Function call operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of cell in the field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the index i </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="224" column="21" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a274696665d8efadef9091750fe3950db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::operator=</definition>
        <argsstring>(const ValueType &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const ValueType &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the passed value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="230" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a8bd676379e963159ca6fdd3c5ce55f9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::operator=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the parsed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to copy from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This field will be sized to the size of the parsed field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="238" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="238" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a89cf1bba89428dd2df53018c321b9929" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt;ValueType&gt;&amp; NeoFOAM::Field&lt; ValueType &gt;::operator+=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic add operator, addition of a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="253" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="253" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ac4dbc74f865c4a838006e65f91cef68a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
        <definition>Field&lt;ValueType&gt;&amp; NeoFOAM::Field&lt; ValueType &gt;::operator-=</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic subtraction operator, subtraction by a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="265" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="265" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ab0195569f34e8c75b0418f4ef14f5b3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt;ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::operator*</definition>
        <argsstring>(const Field&lt; scalar &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply operator, multiply by a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiply. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="277" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="277" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1aca1d0b39c7fa232cb5a31aa92b745080" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt;</type>
        <definition>Field&lt;ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::operator*</definition>
        <argsstring>(const scalar rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1a03eba15c79160376393af407daa0fd7b" kindref="member">scalar</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply operator, multiplies every cell in the field by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to multiply with the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="292" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="292" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a1c9e4d097ea90596f696bbc491587391" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::resize</definition>
        <argsstring>(const size_t size)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Resizes the field to a new size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="304" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="304" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a16966264d31600923c12c3908300b687" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType *</type>
        <definition>ValueType* NeoFOAM::Field&lt; ValueType &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="331" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ad18d4075815570d9f3560a8660dd7d53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ValueType *</type>
        <definition>const ValueType* NeoFOAM::Field&lt; ValueType &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="337" column="22" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1adf7e27c2661a7c1edfd919f1e33e964a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceNeoFOAM_1ad8645a25cba2275ee5bea619093da91e" kindref="member">Executor</ref> &amp;</type>
        <definition>const Executor&amp; NeoFOAM::Field&lt; ValueType &gt;::exec</definition>
        <argsstring>() const</argsstring>
        <name>exec</name>
        <briefdescription>
<para>Gets the executor associated with the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the executor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="343" column="21" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="343" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a2915161f01fcce8b84e661a414bb9a2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref></type>
        <definition>size_t NeoFOAM::Field&lt; ValueType &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Gets the size of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="349" column="13" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a1009e73d13b7ba45b4faaf25bb5802de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::Field&lt; ValueType &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Checks if the field is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the field is empty, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="355" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a565eec5f60f4e057792069c2f4832448" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>std::span&lt; ValueType &gt;</type>
        <definition>std::span&lt;ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::span</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>span</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="358" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a8d2599353d87f5d68a435cbade674455" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>std::span&lt; const ValueType &gt;</type>
        <definition>std::span&lt;const ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::span</definition>
        <argsstring>() const &amp;&amp;=delete</argsstring>
        <name>span</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="361" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a6f3f4f0dbd16309de3786a4d92bf0564" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>std::span&lt; ValueType &gt;</type>
        <definition>std::span&lt;ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::span</definition>
        <argsstring>() &amp;</argsstring>
        <name>span</name>
        <briefdescription>
<para>Gets the field as a span. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Span of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="367" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="367" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a3780518723a1d3843b86f35542004b89" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>std::span&lt; const ValueType &gt;</type>
        <definition>std::span&lt;const ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::span</definition>
        <argsstring>() const &amp;</argsstring>
        <name>span</name>
        <briefdescription>
<para>Gets the field as a span. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Span of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="373" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1aa9f7b5d90837a8dee4cf896c3576dd9d" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>std::span&lt; ValueType &gt;</type>
        <definition>std::span&lt;ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::span</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) &amp;&amp;=delete</argsstring>
        <name>span</name>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="379" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a150d2c90fb27e08630e75433720629c9" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>std::span&lt; const ValueType &gt;</type>
        <definition>std::span&lt;const ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::span</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) const &amp;&amp;=delete</argsstring>
        <name>span</name>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="382" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a50125b46816f330f0559158ed9fcb5ab" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>std::span&lt; ValueType &gt;</type>
        <definition>std::span&lt;ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::span</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) &amp;</argsstring>
        <name>span</name>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Gets a sub view of the field as a span. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Span of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="388" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="388" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a89793090e89cd5267213fe96a373a0af" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>std::span&lt; const ValueType &gt;</type>
        <definition>std::span&lt;const ValueType&gt; NeoFOAM::Field&lt; ValueType &gt;::span</definition>
        <argsstring>(std::pair&lt; size_t, size_t &gt; range) const &amp;</argsstring>
        <name>span</name>
        <param>
          <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Gets a sub view of the field as a span. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Span of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="397" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1aa1e34ceff04763a8bbf7714e1381e0ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref>, <ref refid="namespaceNeoFOAM_1aa8ea339f1c9a4f2232da876ead30a82c" kindref="member">size_t</ref> &gt;</type>
        <definition>std::pair&lt;size_t, size_t&gt; NeoFOAM::Field&lt; ValueType &gt;::range</definition>
        <argsstring>() const</argsstring>
        <name>range</name>
        <briefdescription>
<para>Gets the range of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The range of the field {0, <ref refid="classNeoFOAM_1_1Field_1a2915161f01fcce8b84e661a414bb9a2e" kindref="member">size()</ref>}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="406" column="16" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="406" bodyend="406"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1af6865c7c3fc68b0f5c6ccd829ea17bc7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; ValueType &gt;::validateOtherField</definition>
        <argsstring>(const Field&lt; ValueType &gt; &amp;rhs) const</argsstring>
        <name>validateOtherField</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; ValueType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two fields are the same size and have the same executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="418" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="418" bodyend="422"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class to contain the data and executors for a field and define some basic operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" line="42" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/field.hpp" bodystart="49" bodyend="423"/>
    <listofallmembers>
      <member refid="classNeoFOAM_1_1Field_1ab3d5f8f8a4a7b07d5873f767978c0be7" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>apply</name></member>
      <member refid="classNeoFOAM_1_1Field_1ae6f586e79c51c81a4d786171a9741c02" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>copyToExecutor</name></member>
      <member refid="classNeoFOAM_1_1Field_1a1d14f252f4815e69e8b085946f27cea4" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>copyToHost</name></member>
      <member refid="classNeoFOAM_1_1Field_1a4e66ce8a5aca4acb78041a8b94ff9734" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>copyToHost</name></member>
      <member refid="classNeoFOAM_1_1Field_1a16966264d31600923c12c3908300b687" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>data</name></member>
      <member refid="classNeoFOAM_1_1Field_1ad18d4075815570d9f3560a8660dd7d53" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>data</name></member>
      <member refid="classNeoFOAM_1_1Field_1ad8da4b64627522d2cf5078f1701af863" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>data_</name></member>
      <member refid="classNeoFOAM_1_1Field_1a1009e73d13b7ba45b4faaf25bb5802de" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>empty</name></member>
      <member refid="classNeoFOAM_1_1Field_1adf7e27c2661a7c1edfd919f1e33e964a" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>exec</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac51548bd9bf092b14f8164d2bc742fd5" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>exec_</name></member>
      <member refid="classNeoFOAM_1_1Field_1a6900cfd42fa127eda30b27dd0cebd9a6" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1a1ea08e0601343f6fe0fda8ffd8706d56" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac25179c81371894f06f4c974fcdf081b" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac615ca8777f8e5ce7d5d9cb64cc58441" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1ab17560942b395479c075549c15188709" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1a84b219b5da78a859ec34574db7e8d898" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator()</name></member>
      <member refid="classNeoFOAM_1_1Field_1ab9ace08d86a2bbabfbc66bbd72217950" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator()</name></member>
      <member refid="classNeoFOAM_1_1Field_1ab0195569f34e8c75b0418f4ef14f5b3e" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator*</name></member>
      <member refid="classNeoFOAM_1_1Field_1aca1d0b39c7fa232cb5a31aa92b745080" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator*</name></member>
      <member refid="classNeoFOAM_1_1Field_1a89cf1bba89428dd2df53018c321b9929" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator+=</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac4dbc74f865c4a838006e65f91cef68a" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator-=</name></member>
      <member refid="classNeoFOAM_1_1Field_1a274696665d8efadef9091750fe3950db" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator=</name></member>
      <member refid="classNeoFOAM_1_1Field_1a8bd676379e963159ca6fdd3c5ce55f9e" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator=</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac50ebe1f96d984ab3bad80769cf0e9fb" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator[]</name></member>
      <member refid="classNeoFOAM_1_1Field_1a6e746984b08dcb801db1da82b4cf1011" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator[]</name></member>
      <member refid="classNeoFOAM_1_1Field_1aa1e34ceff04763a8bbf7714e1381e0ac" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>range</name></member>
      <member refid="classNeoFOAM_1_1Field_1a1c9e4d097ea90596f696bbc491587391" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>resize</name></member>
      <member refid="classNeoFOAM_1_1Field_1a2915161f01fcce8b84e661a414bb9a2e" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>size</name></member>
      <member refid="classNeoFOAM_1_1Field_1a4448dad85c0348167844faaf076c01fe" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>size_</name></member>
      <member refid="classNeoFOAM_1_1Field_1a565eec5f60f4e057792069c2f4832448" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>span</name></member>
      <member refid="classNeoFOAM_1_1Field_1a8d2599353d87f5d68a435cbade674455" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>span</name></member>
      <member refid="classNeoFOAM_1_1Field_1a6f3f4f0dbd16309de3786a4d92bf0564" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>span</name></member>
      <member refid="classNeoFOAM_1_1Field_1a3780518723a1d3843b86f35542004b89" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>span</name></member>
      <member refid="classNeoFOAM_1_1Field_1aa9f7b5d90837a8dee4cf896c3576dd9d" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>span</name></member>
      <member refid="classNeoFOAM_1_1Field_1a150d2c90fb27e08630e75433720629c9" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>span</name></member>
      <member refid="classNeoFOAM_1_1Field_1a50125b46816f330f0559158ed9fcb5ab" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>span</name></member>
      <member refid="classNeoFOAM_1_1Field_1a89793090e89cd5267213fe96a373a0af" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>span</name></member>
      <member refid="classNeoFOAM_1_1Field_1af6865c7c3fc68b0f5c6ccd829ea17bc7" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>validateOtherField</name></member>
      <member refid="classNeoFOAM_1_1Field_1a7cad3648ef3dbb9efd4429fd9ddc4860" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>~Field</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
