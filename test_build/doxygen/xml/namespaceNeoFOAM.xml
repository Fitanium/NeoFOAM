<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceNeoFOAM" kind="namespace" language="C++">
    <compoundname>NeoFOAM</compoundname>
    <innerclass refid="classNeoFOAM_1_1fvccBoundaryField" prot="public">NeoFOAM::fvccBoundaryField</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccSurfaceBoundaryField" prot="public">NeoFOAM::fvccSurfaceBoundaryField</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccSurfaceScalarCalculatedBoundaryField" prot="public">NeoFOAM::fvccSurfaceScalarCalculatedBoundaryField</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccSurfaceScalarEmptyBoundaryField" prot="public">NeoFOAM::fvccSurfaceScalarEmptyBoundaryField</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccScalarCalculatedBoundaryField" prot="public">NeoFOAM::fvccScalarCalculatedBoundaryField</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccScalarEmptyBoundaryField" prot="public">NeoFOAM::fvccScalarEmptyBoundaryField</innerclass>
    <innerclass refid="structNeoFOAM_1_1fixedValueBCKernel" prot="public">NeoFOAM::fixedValueBCKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccScalarFixedValueBoundaryField" prot="public">NeoFOAM::fvccScalarFixedValueBoundaryField</innerclass>
    <innerclass refid="structNeoFOAM_1_1ZeroGradientBCKernel" prot="public">NeoFOAM::ZeroGradientBCKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccScalarZeroGradientBoundaryField" prot="public">NeoFOAM::fvccScalarZeroGradientBoundaryField</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccVectorCalculatedBoundaryField" prot="public">NeoFOAM::fvccVectorCalculatedBoundaryField</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccVectorEmptyBoundaryField" prot="public">NeoFOAM::fvccVectorEmptyBoundaryField</innerclass>
    <innerclass refid="structNeoFOAM_1_1fixedVectorValueBCKernel" prot="public">NeoFOAM::fixedVectorValueBCKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccVectorFixedValueBoundaryField" prot="public">NeoFOAM::fvccVectorFixedValueBoundaryField</innerclass>
    <innerclass refid="structNeoFOAM_1_1ZeroGradientVectorBCKernel" prot="public">NeoFOAM::ZeroGradientVectorBCKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccVectorZeroGradientBoundaryField" prot="public">NeoFOAM::fvccVectorZeroGradientBoundaryField</innerclass>
    <innerclass refid="structNeoFOAM_1_1GaussGreenDivKernel" prot="public">NeoFOAM::GaussGreenDivKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1gaussGreenDiv" prot="public">NeoFOAM::gaussGreenDiv</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccSurfaceField" prot="public">NeoFOAM::fvccSurfaceField</innerclass>
    <innerclass refid="classNeoFOAM_1_1fvccVolField" prot="public">NeoFOAM::fvccVolField</innerclass>
    <innerclass refid="structNeoFOAM_1_1GaussGreenKernel" prot="public">NeoFOAM::GaussGreenKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1gaussGreenGrad" prot="public">NeoFOAM::gaussGreenGrad</innerclass>
    <innerclass refid="classNeoFOAM_1_1linear" prot="public">NeoFOAM::linear</innerclass>
    <innerclass refid="classNeoFOAM_1_1surfaceInterpolationKernel" prot="public">NeoFOAM::surfaceInterpolationKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1surfaceInterpolation" prot="public">NeoFOAM::surfaceInterpolation</innerclass>
    <innerclass refid="classNeoFOAM_1_1CompressionMethodFactory" prot="public">NeoFOAM::CompressionMethodFactory</innerclass>
    <innerclass refid="classNeoFOAM_1_1upwind" prot="public">NeoFOAM::upwind</innerclass>
    <innerclass refid="classNeoFOAM_1_1Dictionary" prot="public">NeoFOAM::Dictionary</innerclass>
    <innerclass refid="classNeoFOAM_1_1error" prot="public">NeoFOAM::error</innerclass>
    <innerclass refid="classNeoFOAM_1_1CPUExecutor" prot="public">NeoFOAM::CPUExecutor</innerclass>
    <innerclass refid="classNeoFOAM_1_1GPUExecutor" prot="public">NeoFOAM::GPUExecutor</innerclass>
    <innerclass refid="classNeoFOAM_1_1OMPExecutor" prot="public">NeoFOAM::OMPExecutor</innerclass>
    <innerclass refid="classNeoFOAM_1_1argList" prot="public">NeoFOAM::argList</innerclass>
    <innerclass refid="classNeoFOAM_1_1Time" prot="public">NeoFOAM::Time</innerclass>
    <innerclass refid="classNeoFOAM_1_1boundaryFields" prot="public">NeoFOAM::boundaryFields</innerclass>
    <innerclass refid="classNeoFOAM_1_1domainField" prot="public">NeoFOAM::domainField</innerclass>
    <innerclass refid="classNeoFOAM_1_1Field" prot="public">NeoFOAM::Field</innerclass>
    <innerclass refid="structNeoFOAM_1_1SumKernel" prot="public">NeoFOAM::SumKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1Error" prot="public">NeoFOAM::Error</innerclass>
    <innerclass refid="classNeoFOAM_1_1DimensionMismatch" prot="public">NeoFOAM::DimensionMismatch</innerclass>
    <innerclass refid="classNeoFOAM_1_1BasicFvccGeometryScheme" prot="public">NeoFOAM::BasicFvccGeometryScheme</innerclass>
    <innerclass refid="classNeoFOAM_1_1FvccGeometrySchemeKernel" prot="public">NeoFOAM::FvccGeometrySchemeKernel</innerclass>
    <innerclass refid="classNeoFOAM_1_1FvccGeometryScheme" prot="public">NeoFOAM::FvccGeometryScheme</innerclass>
    <innerclass refid="classNeoFOAM_1_1StencilDataBase" prot="public">NeoFOAM::StencilDataBase</innerclass>
    <innerclass refid="classNeoFOAM_1_1BoundaryMesh" prot="public">NeoFOAM::BoundaryMesh</innerclass>
    <innerclass refid="classNeoFOAM_1_1unstructuredMesh" prot="public">NeoFOAM::unstructuredMesh</innerclass>
    <innerclass refid="classNeoFOAM_1_1Vector" prot="public">NeoFOAM::Vector</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="executor_8hpp_1ae4c14e29f8d05e557ea7f1c13bea6f65" prot="public" static="no">
        <type>std::variant&lt; <ref refid="classNeoFOAM_1_1OMPExecutor" kindref="compound">OMPExecutor</ref>, <ref refid="classNeoFOAM_1_1GPUExecutor" kindref="compound">GPUExecutor</ref>, <ref refid="classNeoFOAM_1_1CPUExecutor" kindref="compound">CPUExecutor</ref> &gt;</type>
        <definition>using NeoFOAM::executor = typedef std::variant&lt;OMPExecutor, GPUExecutor, CPUExecutor&gt;</definition>
        <argsstring></argsstring>
        <name>executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Time_8hpp_1a03eba15c79160376393af407daa0fd7b" prot="public" static="no">
        <type>float</type>
        <definition>typedef float NeoFOAM::scalar</definition>
        <argsstring></argsstring>
        <name>scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/Time.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/Time.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Time_8hpp_1abd392ba7f41bf81fb9e5832c80a357fa" prot="public" static="no">
        <type>std::string</type>
        <definition>using NeoFOAM::word = typedef std::string</definition>
        <argsstring></argsstring>
        <name>word</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/Time.hpp" line="14" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/Time.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="FieldTypeDefs_8hpp_1a476d354d6778b23d4bd3b15eec820f47" prot="public" static="no">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">NeoFOAM::Field</ref>&lt; label &gt;</type>
        <definition>using NeoFOAM::labelField = typedef NeoFOAM::Field&lt;label&gt;</definition>
        <argsstring></argsstring>
        <name>labelField</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldTypeDefs.hpp" line="13" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldTypeDefs.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="FieldTypeDefs_8hpp_1aa8e48fef95ea5b70125d375ba497ff8c" prot="public" static="no">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">NeoFOAM::Field</ref>&lt; scalar &gt;</type>
        <definition>using NeoFOAM::scalarField = typedef NeoFOAM::Field&lt;scalar&gt;</definition>
        <argsstring></argsstring>
        <name>scalarField</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldTypeDefs.hpp" line="14" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldTypeDefs.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="FieldTypeDefs_8hpp_1a9a20b7f140d2b360241253a62b685754" prot="public" static="no">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">NeoFOAM::Field</ref>&lt; <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &gt;</type>
        <definition>using NeoFOAM::vectorField = typedef NeoFOAM::Field&lt;Vector&gt;</definition>
        <argsstring></argsstring>
        <name>vectorField</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldTypeDefs.hpp" line="15" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldTypeDefs.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="label_8hpp_1a43273bbceb549d6ecf4a91241da1fecb" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int NeoFOAM::label</definition>
        <argsstring></argsstring>
        <name>label</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/label.hpp" line="8" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/label.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="label_8hpp_1af5174f80092d05e06e3c0dde4e0617d2" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t NeoFOAM::localIdx</definition>
        <argsstring></argsstring>
        <name>localIdx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/label.hpp" line="9" column="18" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/label.hpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="label_8hpp_1aabb5fe1abea2676399d1be48d89a647c" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t NeoFOAM::globalIdx</definition>
        <argsstring></argsstring>
        <name>globalIdx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/label.hpp" line="10" column="18" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/label.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Error_8hpp_1ac86e8f1f9e6ca5e6ba733c0be37d337e" prot="public" static="no" mutable="no">
        <type><ref refid="classNeoFOAM_1_1error" kindref="compound">error</ref></type>
        <definition>error NeoFOAM::FatalError</definition>
        <argsstring></argsstring>
        <name>FatalError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/Error.hpp" line="30" column="14" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/Error.hpp" declline="30" declcolumn="14"/>
      </memberdef>
      <memberdef kind="variable" id="scalar_8hpp_1a381b6aacc63a05d1c0aa0774afff68f1" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr scalar</type>
        <definition>constexpr scalar NeoFOAM::ROOTVSMALL</definition>
        <argsstring></argsstring>
        <name>ROOTVSMALL</name>
        <initializer>= 1e-18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/scalar.hpp" line="20" column="18" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/scalar.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="fvccBoundaryFieldSelector_8hpp_1ae73733878e997280f7bd860cc2d00de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classNeoFOAM_1_1fvccBoundaryField" kindref="compound">fvccBoundaryField</ref>&lt; T &gt; &gt;</type>
        <definition>std::unique_ptr&lt;fvccBoundaryField&lt;T&gt; &gt; NeoFOAM::getBC</definition>
        <argsstring>(const unstructuredMesh &amp;mesh, int patchID, const Dictionary &amp;patchDict)</argsstring>
        <name>getBC</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1unstructuredMesh" kindref="compound">unstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>int</type>
          <declname>patchID</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> &amp;</type>
          <declname>patchDict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" line="33" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="fvccBoundaryFieldSelector_8hpp_1a17a8b656d83e41a2c5a25b30e085ce8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classNeoFOAM_1_1fvccBoundaryField" kindref="compound">fvccBoundaryField</ref>&lt; scalar &gt; &gt;</type>
        <definition>std::unique_ptr&lt; fvccBoundaryField&lt; Vector &gt; &gt; NeoFOAM::getBC</definition>
        <argsstring>(const unstructuredMesh &amp;mesh, int patchID, const Dictionary &amp;patchDict)</argsstring>
        <name>getBC</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1unstructuredMesh" kindref="compound">unstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>int</type>
          <declname>patchID</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> &amp;</type>
          <declname>patchDict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" line="38" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" bodystart="33" bodyend="35" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" declline="38" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="fvccBoundaryFieldSelector_8hpp_1a8e7d87597b67cca659de2b0dfdeac9f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classNeoFOAM_1_1fvccSurfaceBoundaryField" kindref="compound">fvccSurfaceBoundaryField</ref>&lt; T &gt; &gt;</type>
        <definition>std::unique_ptr&lt;fvccSurfaceBoundaryField&lt;T&gt; &gt; NeoFOAM::getSurfaceBC</definition>
        <argsstring>(const unstructuredMesh &amp;mesh, int patchID, const Dictionary &amp;patchDict)</argsstring>
        <name>getSurfaceBC</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1unstructuredMesh" kindref="compound">unstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>int</type>
          <declname>patchID</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> &amp;</type>
          <declname>patchDict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" line="45" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="fvccBoundaryFieldSelector_8hpp_1aaae982cf0f644b84fbddfceef82031e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classNeoFOAM_1_1fvccSurfaceBoundaryField" kindref="compound">fvccSurfaceBoundaryField</ref>&lt; scalar &gt; &gt;</type>
        <definition>std::unique_ptr&lt; fvccSurfaceBoundaryField&lt; Vector &gt; &gt; NeoFOAM::getSurfaceBC</definition>
        <argsstring>(const unstructuredMesh &amp;mesh, int patchID, const Dictionary &amp;patchDict)</argsstring>
        <name>getSurfaceBC</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1unstructuredMesh" kindref="compound">unstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>int</type>
          <declname>patchID</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Dictionary" kindref="compound">Dictionary</ref> &amp;</type>
          <declname>patchDict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" line="50" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" bodystart="45" bodyend="47" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" declline="50" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="fvccBoundaryFieldSelector_8hpp_1a185c7d94ce03bd701491b80ec2c5495a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classNeoFOAM_1_1fvccSurfaceBoundaryField" kindref="compound">fvccSurfaceBoundaryField</ref>&lt; T &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;fvccSurfaceBoundaryField&lt;T&gt; &gt; &gt; NeoFOAM::createCalculatedBCs</definition>
        <argsstring>(const unstructuredMesh &amp;mesh)</argsstring>
        <name>createCalculatedBCs</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1unstructuredMesh" kindref="compound">unstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" line="57" column="13" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="fvccBoundaryFieldSelector_8hpp_1a8174a89a4469213085dabfff205522eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classNeoFOAM_1_1fvccSurfaceBoundaryField" kindref="compound">fvccSurfaceBoundaryField</ref>&lt; scalar &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::unique_ptr&lt; fvccSurfaceBoundaryField&lt; Vector &gt; &gt; &gt; NeoFOAM::createCalculatedBCs</definition>
        <argsstring>(const unstructuredMesh &amp;mesh)</argsstring>
        <name>createCalculatedBCs</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1unstructuredMesh" kindref="compound">unstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" line="62" column="13" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" bodystart="57" bodyend="59" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryFieldSelector.hpp" declline="62" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="surfaceInterpolationSelector_8hpp_1a38349d408c6af0a4ea955899d7c16c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1surfaceInterpolation" kindref="compound">surfaceInterpolation</ref></type>
        <definition>surfaceInterpolation NeoFOAM::surfaceInterpolationSelector</definition>
        <argsstring>(std::string interPolMethodName, const executor &amp;exec, const unstructuredMesh &amp;mesh)</argsstring>
        <name>surfaceInterpolationSelector</name>
        <param>
          <type>std::string</type>
          <declname>interPolMethodName</declname>
        </param>
        <param>
          <type>const executor &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1unstructuredMesh" kindref="compound">unstructuredMesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/surfaceInterpolation/surfaceInterpolationSelector.hpp" line="18" column="22" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/surfaceInterpolation/surfaceInterpolationSelector.hpp" declline="18" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="executor_8hpp_1a854eacda36fd711f315da1882a68cf0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::operator==</definition>
        <argsstring>(const executor &amp;lhs, const executor &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const executor &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const executor &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two executors are equal, i.e. they are of the same type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first executor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second executor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the executors are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" line="21" column="14" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" bodystart="21" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="executor_8hpp_1ac6bc31149226d33dfe9778abd8e5f6a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::operator!=</definition>
        <argsstring>(const executor &amp;lhs, const executor &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const executor &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const executor &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if two executors are not equal, i.e. they are not of the same type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first executor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second executor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the executors not are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" line="40" column="14" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/core/executor/executor.hpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="fieldComparision_8hpp_1ab2d90f8135e014bd71a87276a3c3ff2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoFOAM::compare</definition>
        <argsstring>(Field&lt; T &gt; &amp;field, T value)</argsstring>
        <name>compare</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/comparisions/fieldComparision.hpp" line="12" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/comparisions/fieldComparision.hpp" bodystart="12" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="fieldComparision_8hpp_1a6fb05ca3af6e2d8e17460fef30a9749a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoFOAM::compare</definition>
        <argsstring>(Field&lt; T &gt; &amp;field, Field&lt; T &gt; &amp;field2)</argsstring>
        <name>compare</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/comparisions/fieldComparision.hpp" line="26" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/comparisions/fieldComparision.hpp" bodystart="26" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="fieldComparision_8hpp_1ac06b18a17b8a0f5fdb3d4c7b6c265414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool NeoFOAM::compare</definition>
        <argsstring>(Field&lt; T &gt; &amp;field, std::span&lt; T &gt; span2)</argsstring>
        <name>compare</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>std::span&lt; T &gt;</type>
          <declname>span2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/comparisions/fieldComparision.hpp" line="48" column="6" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/comparisions/fieldComparision.hpp" bodystart="48" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="FieldOperations_8hpp_1a51d27618ea41c1186250d0c6c5873b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::DECLARE_UNARY_FIELD_OP</definition>
        <argsstring>(map, in(i))</argsstring>
        <name>DECLARE_UNARY_FIELD_OP</name>
        <param>
          <type>map</type>
        </param>
        <param>
          <type>in(i)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" line="45" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" declline="45" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="FieldOperations_8hpp_1a1cfa3896802af9016c5031cf879d0a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::DECLARE_UNARY_FIELD_OP</definition>
        <argsstring>(fill, in)</argsstring>
        <name>DECLARE_UNARY_FIELD_OP</name>
        <param>
          <type>fill</type>
        </param>
        <param>
          <type>in</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" line="46" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" declline="46" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="FieldOperations_8hpp_1a845582db14f8589bc271aa45748f7443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::DECLARE_UNARY_FIELD_OP</definition>
        <argsstring>(setField, in[i])</argsstring>
        <name>DECLARE_UNARY_FIELD_OP</name>
        <param>
          <type>setField</type>
        </param>
        <param>
          <type>in</type>
          <array>[i]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" line="47" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="FieldOperations_8hpp_1ac38900afa52bced18c88b8f68ecd8c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::DECLARE_UNARY_FIELD_OP</definition>
        <argsstring>(scalar_mul, a_f[i] *=in)</argsstring>
        <name>DECLARE_UNARY_FIELD_OP</name>
        <param>
          <type>scalar_mul</type>
        </param>
        <param>
          <type>a_f *</type>
          <array>[i]</array>
          <defval>in</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" line="48" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="FieldOperations_8hpp_1a8356dd342fcc248d70f069c5d82bcb80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::DECLARE_BINARY_FIELD_OP</definition>
        <argsstring>(add, a_f[i]+b_f[i])</argsstring>
        <name>DECLARE_BINARY_FIELD_OP</name>
        <param>
          <type>add</type>
        </param>
        <param>
          <type>a_f+</type>
          <declname>b_f</declname>
          <array>[i][i]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" line="88" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" declline="88" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="FieldOperations_8hpp_1a06a74ee3d3f02b484a54a94c1956579a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::DECLARE_BINARY_FIELD_OP</definition>
        <argsstring>(sub, a_f[i] - b_f[i])</argsstring>
        <name>DECLARE_BINARY_FIELD_OP</name>
        <param>
          <type>sub</type>
        </param>
        <param>
          <type>a_f -</type>
          <declname>b_f</declname>
          <array>[i][i]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" line="89" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" declline="89" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="FieldOperations_8hpp_1a0aa38393da8800ab62d4ef34555f036e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::DECLARE_BINARY_FIELD_OP</definition>
        <argsstring>(mul, a_f[i] *b_f[i])</argsstring>
        <name>DECLARE_BINARY_FIELD_OP</name>
        <param>
          <type>mul</type>
        </param>
        <param>
          <type>a_f *</type>
          <declname>b_f</declname>
          <array>[i][i]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" line="90" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/FieldOperations.hpp" declline="90" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sum_8hpp_1a4dcbfd98270c4706062b4786eedbfdf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T NeoFOAM::sum</definition>
        <argsstring>(const Field&lt; T &gt; &amp;field)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/sum.hpp" line="58" column="3" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/sum.hpp" bodystart="58" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="sum_8hpp_1abb0c8601a46eedab6970aa13093fec6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>scalar</type>
        <definition>scalar NeoFOAM::sum</definition>
        <argsstring>(const Field&lt; scalar &gt; &amp;field)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; scalar &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/sum.hpp" line="69" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/operations/sum.hpp" bodystart="69" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="vector_8hpp_1ac48edf8d161ff1ee717e5fba3a93d770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vector NeoFOAM::operator*</definition>
        <argsstring>(const scalar &amp;sclr, Vector rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const scalar &amp;</type>
          <declname>sclr</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/vector.hpp" line="112" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/vector.hpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="vector_8hpp_1ae0612f5f17d093a87670be33b3d0608f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>KOKKOS_INLINE_FUNCTION Vector NeoFOAM::operator&amp;</definition>
        <argsstring>(const Vector &amp;lhs, Vector rhs)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/vector.hpp" line="119" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/vector.hpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="vector_8hpp_1a30753699ca02c237b4081286380cabd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION scalar</type>
        <definition>KOKKOS_INLINE_FUNCTION scalar NeoFOAM::mag</definition>
        <argsstring>(const Vector &amp;vec)</argsstring>
        <name>mag</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/vector.hpp" line="125" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/vector.hpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="vector_8hpp_1a2238f78222a248fea131225868ac3289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; NeoFOAM::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/vector.hpp" line="130" column="1" declfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/primitives/vector.hpp" declline="130" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/cellCentredFiniteVolume/bcFields/fvccBoundaryField.hpp" line="9" column="1"/>
  </compounddef>
</doxygen>
