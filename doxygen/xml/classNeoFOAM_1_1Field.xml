<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classNeoFOAM_1_1Field" kind="class" language="C++" prot="public">
    <compoundname>NeoFOAM::Field</compoundname>
    <includes refid="Field_8hpp" local="no">Field.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoFOAM_1_1Field_1a75fd13f4ae6ac9cc90f4f5f4fa8b9624" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t NeoFOAM::Field&lt; T &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
<para>Size of the field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="284" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoFOAM_1_1Field_1a197c12afaa1c4709cfa2a4b2af76c5e9" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* NeoFOAM::Field&lt; T &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
<para>Pointer to the field data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="285" column="7" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoFOAM_1_1Field_1ac7b9acd2222eda9c1a60181fe785fde0" prot="private" static="no" mutable="no">
        <type>const executor</type>
        <definition>const executor NeoFOAM::Field&lt; T &gt;::exec_</definition>
        <argsstring></argsstring>
        <name>exec_</name>
        <briefdescription>
<para>Executor associated with the field. (CPU, GPU, openMP, etc.) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="287" column="9" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="287" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1aca838209b531f27aa2c353b007af9e53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; T &gt;::Field</definition>
        <argsstring>(const executor &amp;exec, size_t size)</argsstring>
        <name>Field</name>
        <param>
          <type>const executor &amp;</type>
          <declname>exec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> with a given size on an executor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>Executor associated to the matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="30" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="30" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a728c0985f4d5ff0bd83e78597adbaa35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; T &gt;::Field</definition>
        <argsstring>(const Field&lt; T &gt; &amp;rhs)</argsstring>
        <name>Field</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="40" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="40" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a725bf35c7b92ee1d29c0f62cbf32ebe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NeoFOAM::Field&lt; T &gt;::~Field</definition>
        <argsstring>()</argsstring>
        <name>~Field</name>
        <briefdescription>
<para>Destroy the <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="55" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a4b48af93f77bdd8f94e13fc9baf1460a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; T &gt;::apply</definition>
        <argsstring>(func f)</argsstring>
        <name>apply</name>
        <param>
          <type>func</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>applies a functor, transformation, to the field </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The functor to map over the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Ideally the f should be a KOKKOS_LAMBA </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="69" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ac7b4565be06efc111e443d7a74d2abd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
        <definition>Field&lt;T&gt; NeoFOAM::Field&lt; T &gt;::copyToHost</definition>
        <argsstring>()</argsstring>
        <name>copyToHost</name>
        <briefdescription>
<para>Returns a copy of the field back to the host. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the field on the host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="78" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ae9e36e3e8cb791083123ecd1c0bce764" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; T &gt;::copyToHost</definition>
        <argsstring>(Field&lt; T &gt; &amp;result)</argsstring>
        <name>copyToHost</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Copies the data (from anywhere) to a parsed host field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The field into which the data must be copied. Must be sized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>exits if the size of the result field is not the same as the source field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="92" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="92" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a91b13056964193200c9f4727144e693f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION T &amp;</type>
        <definition>KOKKOS_FUNCTION T&amp; NeoFOAM::Field&lt; T &gt;::operator()</definition>
        <argsstring>(const int i)</argsstring>
        <name>operator()</name>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Function call operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of cell in the field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the index i</para>
</simplesect>
<simplesect kind="warning"><para>This function is not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="134" column="7" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="134" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a18c84caa713c1be36bea0a3fa8046afd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION const T &amp;</type>
        <definition>KOKKOS_FUNCTION const T&amp; NeoFOAM::Field&lt; T &gt;::operator()</definition>
        <argsstring>(const int i) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Function call operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of cell in the field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the index i</para>
</simplesect>
<simplesect kind="warning"><para>This function is not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="148" column="13" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ad79606b5e55d41a4f2f5364f7e8a2809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; T &gt;::operator=</definition>
        <argsstring>(const Field&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the parsed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to copy from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This field will be sized to the size of the parsed field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="161" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1adf3268d3f015ed7d3ac499b8dd1e87ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; T &gt;::operator=</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator, Sets the field values to that of the value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="167" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a89f7e7f81e84816dfee9894b47c7486e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
        <definition>Field&lt;T&gt; NeoFOAM::Field&lt; T &gt;::operator+</definition>
        <argsstring>(const Field&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic add operator, addition of a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to add with this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="176" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="176" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a5e640195842ec6cb890e4a81dc8fb0b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
        <definition>Field&lt;T&gt; NeoFOAM::Field&lt; T &gt;::operator-</definition>
        <argsstring>(const Field&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic subtraction operator, subtraction by a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="189" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="189" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a9b1d3ba42d97feb27e0253172d563019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
        <definition>Field&lt;T&gt; NeoFOAM::Field&lt; T &gt;::operator*</definition>
        <argsstring>(const Field&lt; scalar &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; scalar &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic subtraction operator, subtraction by a second field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to subtract from this field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="202" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="202" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a534418f401f1da6760464428cd7c8b14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1Field" kindref="compound">Field</ref>&lt; T &gt;</type>
        <definition>Field&lt;T&gt; NeoFOAM::Field&lt; T &gt;::operator*</definition>
        <argsstring>(const scalar rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const scalar</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Arithmetic multiply operator, multiplies every cell in the field by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to multiply with the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="216" column="12" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="216" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1abb08c811bfad17b79f99720d259f6757" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::Field&lt; T &gt;::setSize</definition>
        <argsstring>(const size_t size)</argsstring>
        <name>setSize</name>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the Size of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size to set the field to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="230" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="230" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1af51a828bc00b9af9570737f9776d36a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* NeoFOAM::Field&lt; T &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="250" column="8" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1ae7f813ea93842611ec32ce6af238a191" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* NeoFOAM::Field&lt; T &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Direct access to the underlying field data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the first cell data in the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="256" column="14" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a47c422de47c8ac36edf73129ed4c9b75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const executor &amp;</type>
        <definition>const executor&amp; NeoFOAM::Field&lt; T &gt;::exec</definition>
        <argsstring>()</argsstring>
        <name>exec</name>
        <briefdescription>
<para>Gets the executor associated with the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the executor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="262" column="21" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1adb67919d7d63d790258680dce54e76fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NeoFOAM::Field&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Gets the size of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="268" column="13" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a26b8f30b64552bf11b60bc9b8d76b747" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1span" kindref="compound">span</ref>&lt; T &gt;</type>
        <definition>span&lt;T&gt; NeoFOAM::Field&lt; T &gt;::field</definition>
        <argsstring>()</argsstring>
        <name>field</name>
        <briefdescription>
<para>Gets the field as a span. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Span of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="274" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1Field_1a5c226fa9c3b2f5ab21d48b6c7902811a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classNeoFOAM_1_1span" kindref="compound">span</ref>&lt; T &gt;</type>
        <definition>const span&lt;T&gt; NeoFOAM::Field&lt; T &gt;::field</definition>
        <argsstring>() const</argsstring>
        <name>field</name>
        <briefdescription>
<para>Gets the field as a span. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Span of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="280" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="280" bodyend="280"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class to contain the data and executors for a field and define some basic operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" line="21" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/Field.hpp" bodystart="22" bodyend="288"/>
    <listofallmembers>
      <member refid="classNeoFOAM_1_1Field_1a4b48af93f77bdd8f94e13fc9baf1460a" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>apply</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac7b4565be06efc111e443d7a74d2abd0" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>copyToHost</name></member>
      <member refid="classNeoFOAM_1_1Field_1ae9e36e3e8cb791083123ecd1c0bce764" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>copyToHost</name></member>
      <member refid="classNeoFOAM_1_1Field_1af51a828bc00b9af9570737f9776d36a8" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>data</name></member>
      <member refid="classNeoFOAM_1_1Field_1ae7f813ea93842611ec32ce6af238a191" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>data</name></member>
      <member refid="classNeoFOAM_1_1Field_1a197c12afaa1c4709cfa2a4b2af76c5e9" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>data_</name></member>
      <member refid="classNeoFOAM_1_1Field_1a47c422de47c8ac36edf73129ed4c9b75" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>exec</name></member>
      <member refid="classNeoFOAM_1_1Field_1ac7b9acd2222eda9c1a60181fe785fde0" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>exec_</name></member>
      <member refid="classNeoFOAM_1_1Field_1a26b8f30b64552bf11b60bc9b8d76b747" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>field</name></member>
      <member refid="classNeoFOAM_1_1Field_1a5c226fa9c3b2f5ab21d48b6c7902811a" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>field</name></member>
      <member refid="classNeoFOAM_1_1Field_1aca838209b531f27aa2c353b007af9e53" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1a728c0985f4d5ff0bd83e78597adbaa35" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>Field</name></member>
      <member refid="classNeoFOAM_1_1Field_1a91b13056964193200c9f4727144e693f" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator()</name></member>
      <member refid="classNeoFOAM_1_1Field_1a18c84caa713c1be36bea0a3fa8046afd" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator()</name></member>
      <member refid="classNeoFOAM_1_1Field_1a9b1d3ba42d97feb27e0253172d563019" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator*</name></member>
      <member refid="classNeoFOAM_1_1Field_1a534418f401f1da6760464428cd7c8b14" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator*</name></member>
      <member refid="classNeoFOAM_1_1Field_1a89f7e7f81e84816dfee9894b47c7486e" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator+</name></member>
      <member refid="classNeoFOAM_1_1Field_1a5e640195842ec6cb890e4a81dc8fb0b7" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator-</name></member>
      <member refid="classNeoFOAM_1_1Field_1ad79606b5e55d41a4f2f5364f7e8a2809" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator=</name></member>
      <member refid="classNeoFOAM_1_1Field_1adf3268d3f015ed7d3ac499b8dd1e87ed" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>operator=</name></member>
      <member refid="classNeoFOAM_1_1Field_1abb08c811bfad17b79f99720d259f6757" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>setSize</name></member>
      <member refid="classNeoFOAM_1_1Field_1adb67919d7d63d790258680dce54e76fb" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>size</name></member>
      <member refid="classNeoFOAM_1_1Field_1a75fd13f4ae6ac9cc90f4f5f4fa8b9624" prot="private" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>size_</name></member>
      <member refid="classNeoFOAM_1_1Field_1a725bf35c7b92ee1d29c0f62cbf32ebe2" prot="public" virt="non-virtual"><scope>NeoFOAM::Field</scope><name>~Field</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
