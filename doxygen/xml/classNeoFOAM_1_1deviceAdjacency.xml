<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classNeoFOAM_1_1deviceAdjacency" kind="class" language="C++" prot="public">
    <compoundname>NeoFOAM::deviceAdjacency</compoundname>
    <includes refid="deviceAdjacency_8hpp" local="no">deviceAdjacency.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Tlabel</type>
      </param>
      <param>
        <type>bool</type>
        <declname>directed</declname>
        <defname>directed</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classNeoFOAM_1_1deviceAdjacency_1afffc3093f8e52b65046cd97f5f252a9c" prot="private" static="no">
        <type>deviceField&lt; NeoFOAM::localIdx &gt;</type>
        <definition>using NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::LabelField =  deviceField&lt;NeoFOAM::localIdx&gt;</definition>
        <argsstring></argsstring>
        <name>LabelField</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="64" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classNeoFOAM_1_1deviceAdjacency_1a016f665cf172a5e8e222b1663c0fa520" prot="private" static="no">
        <type>Kokkos::View&lt; Tlabel * &gt;</type>
        <definition>using NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::View =  Kokkos::View&lt;Tlabel*&gt;</definition>
        <argsstring></argsstring>
        <name>View</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="65" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNeoFOAM_1_1deviceAdjacency_1a9f54367d11590de6978c41d2354836ed" prot="private" static="no" mutable="no">
        <type>View</type>
        <definition>View NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::adjacency_</definition>
        <argsstring></argsstring>
        <name>adjacency_</name>
        <briefdescription>
<para>Stores adjacency information for the nodes of the graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="330" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoFOAM_1_1deviceAdjacency_1a5188baa6d599c08bcd8b155d936aba96" prot="private" static="no" mutable="no">
        <type>View</type>
        <definition>View NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::offset_</definition>
        <argsstring></argsstring>
        <name>offset_</name>
        <briefdescription>
<para>One greater than size, stores offset positions of the adjaceny for each node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="331" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNeoFOAM_1_1deviceAdjacency_1acdf5663a3152d1ea64819774c7318c62" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <briefdescription>
<para>Name of the object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="332" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="332" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a4089b4898a02bb4c842eaa81a49fd551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_FUNCTION</type>
        <definition>KOKKOS_FUNCTION NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::deviceAdjacency</definition>
        <argsstring>()=default</argsstring>
        <name>deviceAdjacency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="74" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1aae8e05458f6d5968030672d614817e15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION</type>
        <definition>KOKKOS_FUNCTION NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::deviceAdjacency</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>deviceAdjacency</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="77" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1ae7273f7424826fadb998dd125dd866a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION</type>
        <definition>KOKKOS_FUNCTION NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::deviceAdjacency</definition>
        <argsstring>(const deviceAdjacency&lt; Tlabel, directed &gt; &amp;other)</argsstring>
        <name>deviceAdjacency</name>
        <param>
          <type>const <ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref>&lt; Tlabel, directed &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="82" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="82" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1af41e1212807c17318e7c49a30b634c68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION</type>
        <definition>KOKKOS_FUNCTION NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::deviceAdjacency</definition>
        <argsstring>(const std::string &amp;name, const int size)</argsstring>
        <name>deviceAdjacency</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="86" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a8be7467b76d59a2d893c1fc10fde7bb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION</type>
        <definition>KOKKOS_FUNCTION NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::deviceAdjacency</definition>
        <argsstring>(const std::string &amp;name, const View &amp;adjacency, const View &amp;offset)</argsstring>
        <name>deviceAdjacency</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const View &amp;</type>
          <declname>adjacency</declname>
        </param>
        <param>
          <type>const View &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="91" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a33771ff672f149d9f1c6bee3eb6084d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION</type>
        <definition>KOKKOS_FUNCTION NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::deviceAdjacency</definition>
        <argsstring>(const View &amp;adjacency, const View &amp;offset)</argsstring>
        <name>deviceAdjacency</name>
        <param>
          <type>const View &amp;</type>
          <declname>adjacency</declname>
        </param>
        <param>
          <type>const View &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="100" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a763fabd08d70c4bb70e8e9eefe9e3903" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION</type>
        <definition>KOKKOS_FUNCTION NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::deviceAdjacency</definition>
        <argsstring>(const std::string &amp;name, const LabelField &amp;adjacency, const LabelField &amp;offset)</argsstring>
        <name>deviceAdjacency</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const LabelField &amp;</type>
          <declname>adjacency</declname>
        </param>
        <param>
          <type>const LabelField &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="108" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1acb1e43297a23eae7012e255ca47d7aa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION</type>
        <definition>KOKKOS_FUNCTION NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::deviceAdjacency</definition>
        <argsstring>(const LabelField &amp;adjacency, const LabelField &amp;offset)</argsstring>
        <name>deviceAdjacency</name>
        <param>
          <type>const LabelField &amp;</type>
          <declname>adjacency</declname>
        </param>
        <param>
          <type>const LabelField &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="116" column="5" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="116" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1ae9739e780cdfcf85e7cacbc348c33554" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref>&lt; Tlabel, directed &gt; &amp;</type>
        <definition>deviceAdjacency&lt;Tlabel, directed&gt;&amp; NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::operator=</definition>
        <argsstring>(deviceAdjacency&lt; Tlabel, directed &gt; &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref>&lt; Tlabel, directed &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move Assignment operator for <ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Tlabel</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the labels in the adjacency matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directed</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean value indicating whether the adjacency matrix is directed or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref> object to be assigned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this <ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref> object.</para>
</simplesect>
This operator assigns the contents of another <ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref> object to this object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="136" column="21" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1ae151dc32ef1dba0111d53bf0716aee8e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Checks if the <ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref> is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the <ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref> is empty, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="155" column="21" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1afd82a02ab319bc1d0a5e055e2fd264d2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Tlabel</type>
        <definition>Tlabel NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the size of the adjacency list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the adjacency list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="161" column="20" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a7e7ecb7ad4f391cc9ae5e031bd856794" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Kokkos::View&lt; const Tlabel * &gt;</type>
        <definition>Kokkos::View&lt;const Tlabel *&gt; NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::operator()</definition>
        <argsstring>(const Tlabel &amp;i_node) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const Tlabel &amp;</type>
          <declname>i_node</declname>
        </param>
        <briefdescription>
<para>Returns a Kokkos::View object containing the connection for the parsed node index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i_node</parametername>
</parameternamelist>
<parameterdescription>
<para>The index for which the adjacency information is requested. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Kokkos::View object containing the adjacency information.</para>
</simplesect>
This function returns a Kokkos::View object that provides a const pointer to Tlabel. The view is created using the adjacency_ array and the offset_ array, with the range specified by the index and index + 1. The resulting view represents the adjacency information for the given index.</para>
<para><simplesect kind="warning"><para>The node index must be in the rage [0: <ref refid="classNeoFOAM_1_1deviceAdjacency_1afd82a02ab319bc1d0a5e055e2fd264d2" kindref="member">size()</ref>]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="182" column="26" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1aa2940e0b9971a30da050a94f50db9e1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns a pair of pointers to the data stored in the private adjacency and offset arrays. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pair of pointers to the adjacency and offset data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="192" column="18" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a440b3223511b32b901bd87545283142a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::insert</definition>
        <argsstring>(const edge&lt; Tlabel &gt; &amp;edge)</argsstring>
        <name>insert</name>
        <param>
          <type>const edge&lt; Tlabel &gt; &amp;</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Inserts an edge connection into the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">edge</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge connection to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the edge was successfully inserted, false otherwise (because it already exists in the graph).</para>
</simplesect>
This function inserts the specified edge connection into the graph. In the case of an undirected graph both the connectivity of the first and second node are updated. In the case of a directed graph only the edge is interpreted as first -&gt; second and therefore only the connectivity of the first node is updated.</para>
<para><simplesect kind="note"><para>The graph will be resized to accomodate the new edge if necessary. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="212" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="212" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1ac62f9af77de22b4613bff73ea90c682b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::resize</definition>
        <argsstring>(const Tlabel &amp;size)</argsstring>
        <name>resize</name>
        <param>
          <type>const Tlabel &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Resizes the adjacency container to accomodate more nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the container.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function resizes the adjacency container to accommodate the specified size. It may allocate additional memory or deallocate existing memory as necessary. New nodes are have no connections.</para>
<para><simplesect kind="note"><para>When sizing down the interprentation is that &apos;nodes&apos; are being lost. Therefor remaining nodes which are connected to the lost nodes will have their connectivity updated to reflect the loss of the node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="239" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="239" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a24626e7c884e0dc25fde9b383aa232dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::contains</definition>
        <argsstring>(const edge&lt; Tlabel &gt; &amp;check_edge) const</argsstring>
        <name>contains</name>
        <param>
          <type>const edge&lt; Tlabel &gt; &amp;</type>
          <declname>check_edge</declname>
        </param>
        <briefdescription>
<para>Checks if the adjacency list contains a specific connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">check_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge to check for in the graph. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the edge is found, false otherwise.</para>
</simplesect>
This function checks if the adjacency list contains a specific connection. It returns true if the connection is found, and false otherwise.</para>
<para><simplesect kind="warning"><para>The connection must have a valid label.</para>
</simplesect>
<simplesect kind="note"><para>This function assumes that the adjacency list is properly initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="301" column="11" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="301" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a90c761c8b7788f302aae1a97cfdd0b02" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>name</name>
        <briefdescription>
<para>Returns the name of the object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The name of the object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="320" column="18" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="320" bodyend="323"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a9ec9f506430fec157db4d9df93ad67f3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::viewDataInit</definition>
        <argsstring>(const View &amp;adjacency, const View &amp;offset)</argsstring>
        <name>viewDataInit</name>
        <param>
          <type>const View &amp;</type>
          <declname>adjacency</declname>
        </param>
        <param>
          <type>const View &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Initializes the member view&apos;s data for adjacency and offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">adjacency</parametername>
</parameternamelist>
<parameterdescription>
<para>The view for adjacency of the graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The view for offset of the graph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The view members of this class are populated via a deep copy of the parsed data and have their &apos;names&apos; set, there is no checking of consitency or correctness of the data parsed in. This responsibility is left to the caller (other functions). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="347" column="17" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="347" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1aa75c9f82d62eaa3f450208205c784443" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::parallelInit</definition>
        <argsstring>()</argsstring>
        <name>parallelInit</name>
        <briefdescription>
<para>Initializes the adjacency list by ensuring/sorting the connections per node are in acending order. </para>
        </briefdescription>
        <detaileddescription>
<para>For non-empty adjacency lists, this function loops over all nodes (rows) and brute forces sorces the connections in acending order. Due to the percieved infrequency of the call and the small size of the adjacency no optimisation of the sorting approach was considered.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the adjacency list could not be sorted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="364" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="364" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a9b92e5f9cb814cbecb9fd780b84d8387" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::check_consitency</definition>
        <argsstring>()</argsstring>
        <name>check_consitency</name>
        <briefdescription>
<para>Checks the consistency of the adjacency. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks the consistency of the adjacency and offset contains, to ensure a valid graph initialisation. the containers must be populated with the offset view correctly initialised, no sorting is required for the adjacency view.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if offest container is of size 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the first value of a non-zero sized offset container is non-zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the last entry&apos;s value of a non-zero sized offset container is not adjacency.size(). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if an undirected adjacency list is not symmetric (degenerate). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if an undirected adjacency list contains nodes with indicies higher than <ref refid="classNeoFOAM_1_1deviceAdjacency_1afd82a02ab319bc1d0a5e055e2fd264d2" kindref="member">size()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="406" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="406" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1a5516cbea63bcf1a636a719e9db2fdde3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::insertAdjacency</definition>
        <argsstring>(const edge&lt; Tlabel &gt; &amp;edge)</argsstring>
        <name>insertAdjacency</name>
        <param>
          <type>const edge&lt; Tlabel &gt; &amp;</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Inserts an adjacency edge into the adjacency list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">edge</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge to be used to inserted further adjacency.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function inserts an adjacency edge into the adjacency list. It determines the correct position to insert the edge based on the existing connections of the parse edge. Where correct position refers to the class storage of connections being sorted in an ascending fashion for each node.</para>
<para><simplesect kind="note"><para>This function assumes that the adjacency list is already sorted in ascending order.</para>
</simplesect>
<simplesect kind="warning"><para>The offset_ view must already be resized to accomodate the new edge, but must contain the old offset data. </para>
</simplesect>
<simplesect kind="warning"><para>The offset_ veiw is not updated, it is of the caller to update the offset_ view post this call. </para>
</simplesect>
<simplesect kind="warning"><para>This function does not perform any checks for duplicate edges. It is the responsibility of the caller to ensure that duplicate edges are not inserted. The graph will be in an undefined state if duplicate are added. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="462" column="10" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="462" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classNeoFOAM_1_1deviceAdjacency_1aaa4ac68e69fd8cc05fe82fae5fea7147" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t NeoFOAM::deviceAdjacency&lt; Tlabel, directed &gt;::offset_shift</definition>
        <argsstring>() const noexcept</argsstring>
        <name>offset_shift</name>
        <briefdescription>
<para>Returns an offset shift value, determined by being a directed or undirected graph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The offset shift value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="509" column="22" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="509" bodyend="509"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an adjacency graph, for both directed and undirected variants. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Tlabel</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the labels in the adjacency matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directed</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean value indicating whether the adjacency matrix is directed or not.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The <computeroutput><ref refid="classNeoFOAM_1_1deviceAdjacency" kindref="compound">deviceAdjacency</ref></computeroutput> class represents an adjacency graph, which records the connectivity relationship between nodes through edges. The graph stores specifically the connectivity between nodes in the graph. The template parameter <computeroutput>Tlabel</computeroutput> specifies the type of the labels int, uint32, etc. The <computeroutput>directed</computeroutput> parameter indicates whether the graph is directed or undirected. In the undirected variant the graph edges are considered to connect both nodes (of the edge), and therefor no distiction is made interms of direction between the 0 and 1 node of the edge. Thus the graph is symmetric, for example, if node 10 is connected to node 20 then node 20 is connected to 10. In the directed variant, an edge connects the 0 node to the 1 node, and therefor the graph is not symmetric. For example, if node 10 is connected to node 20, the reverse is not true.</para>
<para>A word no memory layout: To optimise memory access the data in the class is stored &apos;flat&apos; with an adjacency View and an offset View. The former contains the connections of the graph while the later stores the start and end position (offset to) of each nodes&apos; connectivity in the adjacency container. Within each node&apos;s connectivity the connections are sorted in accending order. Finally, the offset container is one greater than the size of the adjacency container, to faciliate slightly more lazy programing - since the first element will always be zero.</para>
<para><simplesect kind="note"><para>An directed graph can therefor be used to represent the connection between two different &apos;types/classes&apos; of nodes rather than the same. For example, a graph could be used to represent the connection between cells and faces.</para>
</simplesect>
<simplesect kind="note"><para>The undirected graphs allow for nodes to be self referenced/connected.</para>
</simplesect>
<xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Nice to have functions/operators operator+ (graph unition), operator-(graph intersection), remove to an edge. </para>
<para>Batch insert for improved performance. </para>
<para>Optimise undirected memory layout - currently data is duplicated. </para>
<para>Add further &apos;stl like functions&apos; </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <location file="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" line="62" column="1" bodyfile="/home/runner/work/NeoFOAM/NeoFOAM/include/NeoFOAM/fields/deviceAdjacency.hpp" bodystart="63" bodyend="511"/>
    <listofallmembers>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a9f54367d11590de6978c41d2354836ed" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>adjacency_</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a9b92e5f9cb814cbecb9fd780b84d8387" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>check_consitency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a24626e7c884e0dc25fde9b383aa232dc" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>contains</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1aa2940e0b9971a30da050a94f50db9e1b" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>data</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a4089b4898a02bb4c842eaa81a49fd551" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>deviceAdjacency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1aae8e05458f6d5968030672d614817e15" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>deviceAdjacency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1ae7273f7424826fadb998dd125dd866a7" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>deviceAdjacency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1af41e1212807c17318e7c49a30b634c68" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>deviceAdjacency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a8be7467b76d59a2d893c1fc10fde7bb4" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>deviceAdjacency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a33771ff672f149d9f1c6bee3eb6084d2" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>deviceAdjacency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a763fabd08d70c4bb70e8e9eefe9e3903" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>deviceAdjacency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1acb1e43297a23eae7012e255ca47d7aa9" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>deviceAdjacency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1ae151dc32ef1dba0111d53bf0716aee8e" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>empty</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a440b3223511b32b901bd87545283142a" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>insert</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a5516cbea63bcf1a636a719e9db2fdde3" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>insertAdjacency</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1afffc3093f8e52b65046cd97f5f252a9c" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>LabelField</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a90c761c8b7788f302aae1a97cfdd0b02" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>name</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1acdf5663a3152d1ea64819774c7318c62" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>name_</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a5188baa6d599c08bcd8b155d936aba96" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>offset_</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1aaa4ac68e69fd8cc05fe82fae5fea7147" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>offset_shift</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a7e7ecb7ad4f391cc9ae5e031bd856794" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>operator()</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1ae9739e780cdfcf85e7cacbc348c33554" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>operator=</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1aa75c9f82d62eaa3f450208205c784443" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>parallelInit</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1ac62f9af77de22b4613bff73ea90c682b" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>resize</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1afd82a02ab319bc1d0a5e055e2fd264d2" prot="public" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>size</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a016f665cf172a5e8e222b1663c0fa520" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>View</name></member>
      <member refid="classNeoFOAM_1_1deviceAdjacency_1a9ec9f506430fec157db4d9df93ad67f3" prot="private" virt="non-virtual"><scope>NeoFOAM::deviceAdjacency</scope><name>viewDataInit</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
